<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>false on xuhui</title>
    <link>https://blog.xuhui.dev/series/false/</link>
    <description>Recent content in false on xuhui</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 06 Nov 2022 20:16:40 +0800</lastBuildDate><atom:link href="https://blog.xuhui.dev/series/false/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Identity</title>
      <link>https://blog.xuhui.dev/posts/identity/</link>
      <pubDate>Sun, 06 Nov 2022 20:16:40 +0800</pubDate>
      
      <guid>https://blog.xuhui.dev/posts/identity/</guid>
      <description>从JWT开始 我对乱七八糟登录认证的认知是从JWT开始的, 无状态, 听到这一条我就知道我离不开他了, 不是别的, 我SQL写得比较拉跨, 毕竟前端选手, 后端属实业余, 吹牛逼还, 行写SQL直接就现原形了.
不过后来我发现好像这个无状态好像也不差绝对的, 登录不还得有登出吗, 登录不设白名单, 登出的时候就得设个黑名单.
后来就觉得跟普通的session_id方案差不多了, 加个公用的数据库, session_id照样跨系统用. 而JWT这玩意配置起来也比较麻烦, 在ASP.NET Core中, 生成JWT和利用JWT进行认证授权是要分开写两套的, 麻烦, 不给我网, 我连那两个包名都记不住.
AspNet Identity &amp;amp; IdentityServer流弊 当我发现这东西以后, 我才知道自己写登录是多离谱的事, 尼玛别人连登陆页面和数据库都给你写好了, 拓展也是无压力. 只是我发现浏览器是把信息存在cookie里的, 当时心里就感觉有些不妙.
不过如果是要微服务, 单做一个登陆服务, Identity就不行了, 然后微软网站告诉我有个东西叫IdentityServer, 开箱即用的OIDC和Identity集成, 这等于说用.NET技术栈的话压根就不用愁认证方面的问题了?
不过很快我发现我错了, 前后端分离, 这是我学习的一个宗旨, 虽然MVC,Razor Pages以及Blazor Server我也简单过了一遍, 但没有前后端分离是肯定不行的, 认证服务器,资源服务器谈不上啥分离不分离, 要分离的就是使用资源的客户端, 终端用户使用的应用, 然后, Boom
OAuth2有四种模式
Implicit Grant我手动pass, 属实不想再前端整这些玩意儿, 前端应当具有更强的表现力和更优的交互, 而不是操心这些, 而且token存浏览器本身就不是百分百安全. Client Credentials Grant, 这玩意不是用在这里的 Password Grant, 狗听了都摇头 Authorization Code Grant, 就它了, 前端几乎无感, 安全性高 然后, 出岔子了, 开发时, 前端和后端并不是同一个HOST, 于是Backend Channel在重定向的时候是定到后端的, 而我是将后端代理到前端, 于是跨域了, 嗯, 于是我用AspNet.</description>
    </item>
    
    <item>
      <title>Postgres With Orm</title>
      <link>https://blog.xuhui.dev/posts/postgres-with-orm/</link>
      <pubDate>Sun, 06 Nov 2022 19:57:00 +0800</pubDate>
      
      <guid>https://blog.xuhui.dev/posts/postgres-with-orm/</guid>
      <description>Postgresql 数据库是真的舒服, 数组JSON都支持, 对于一些数据我们可以利用支持这个特性直接给他冗余到同一张表去, 免得动不动两张表三张表一起查, 慢不说, 主要是写起来麻烦.
但这玩意跟ORM一起来就坏事了, ORM为了通用, 支持的肯定是一组数据库的共有的特性, postgres很多东西就用不了, EF Core 6下JSON相关的各种操作几乎全军覆没, 只能是基本的读写, 不过7已经加入了一些聚合操作, 但索引的支持遥遥无期; 另外在查询的时候也常用Dapper, 可你这个映射不太行啊, 我这个字段是JSONB, 你给我干成字符串几个意思?</description>
    </item>
    
    <item>
      <title>Web Component</title>
      <link>https://blog.xuhui.dev/posts/web-component/</link>
      <pubDate>Fri, 14 Oct 2022 20:49:00 +0800</pubDate>
      
      <guid>https://blog.xuhui.dev/posts/web-component/</guid>
      <description>琢磨了下Web Component, 感觉就是还不太好用
跟现有的视图库相比，自定义元素并不方便，一些构建web components的库对其进行了封装，然而封装后的api又对不齐了，到头来还是距离原生开发有距离
这一点也不知道是该说好还是不好，web component这边对于事件并没有额外的关心，你就按照Web API去做就是了，假如说需要封装一个自己的input，那么在输入的时候就自行dispatchEvent(new InputEvent(&#39;input&#39;, {...}))也就行了，然而问题是，习惯了vue、react的我们怎么可能还这么写，甚至可能都不知道还有这API。。vue的事件似乎更好用一些，react直接传回调更是神之设计。不过问题倒也不大，熟悉下原来不常用的API, 就跟写原生js一样。
这个应该最容易发现，我们在用现有的视图库时，props管他啥类型，直接塞到模板/JSX上，但在html里，嗯，老实用字符串吧，复杂数据还得用js去设置。
样式的问题，现在的编辑器，直接在ts/js文件里用字符串写css没提示啊，单独起一个文件吧，还得过一道编译，麻烦。
编辑器对自定义元素的支持拉胯，虽然几年前vscode就已经支持了custom data，但在我不长的体验时间里失灵有点频繁。</description>
    </item>
    
    <item>
      <title>Fucking Javascript</title>
      <link>https://blog.xuhui.dev/posts/fucking-javascript/</link>
      <pubDate>Thu, 13 Oct 2022 23:56:23 +0800</pubDate>
      
      <guid>https://blog.xuhui.dev/posts/fucking-javascript/</guid>
      <description>迷惑的unrefined 无意中看到了某项目的代码中用了void 0，不是很懂为啥不用undefined，遂百度，得到的回答是undefined不是保留字，只是一个全局变量
一敲， 还真是这样
哦，怕全局变量被改了嘛，情有可原， 然后他妈的就这样了
你说你闹哪样？</description>
    </item>
    
    <item>
      <title>关于深拷贝</title>
      <link>https://blog.xuhui.dev/posts/about-deepcopy/</link>
      <pubDate>Wed, 05 Oct 2022 00:39:52 +0800</pubDate>
      
      <guid>https://blog.xuhui.dev/posts/about-deepcopy/</guid>
      <description>原来遇到要深拷贝这种操作我一般就JSON.stingify然后JSON.parse了(为啥不用lodash呢, 我也没个很好的理由, 可能是看见项目package.json里没这个包也不好自己加得?)
后来lodash就真香了, 但某次看着引入的函数, 我就在想这种递归的方式比用JSON好在哪里, 函数没了? 我只是用来拷贝数据, 不存在这个问题啊; 循环依赖, 什么大聪明非得干出循环依赖的数据来? 至于别的, 等等, JSON和JS对象差别在哪? JS对象的类型定义应该是Record&amp;lt;string | number | Symbol, any&amp;gt;, 嗯Symbol类型肯定是炸了, 不过谁数据里要这玩意儿啊, 再想想别的. 嗯, JSON就对象, 数组, 字符串, 数字, 布尔和null几种类型, 但JS常用的还有undefined, Date也用来表示数据, undefined我知道, 序列化后就没得咯, 很棒的特性, 表单置空用这个就不会发额外字段到后端了, Date呢, 试了下, 会变成ISO格式的字符串, 原来如此. 另外一搜索, 发现还有NaN, Infinity, -Infinity也会被序列化成null.
另外前阵子出了个structuredClone的API, 用这个的话更好, lodash可删(防抖节流? 嗯, 先继续用着吧, 正经人谁手写这玩意儿啊). 一看兼容性, 好家伙Chrome 98, Firefox 94, Node.Js 17, 这谁顶得住, 但这个see also就很妙了, 对啊, 这玩意api虽然有些许不同, 但不还是个深拷贝吗, polyfill下就得了, cloneDeep可删.</description>
    </item>
    
  </channel>
</rss>
