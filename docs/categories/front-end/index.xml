<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>front-end on xuhui</title>
    <link>https://blog.xuhui.dev/categories/front-end/</link>
    <description>Recent content in front-end on xuhui</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 14 Oct 2022 20:49:00 +0800</lastBuildDate><atom:link href="https://blog.xuhui.dev/categories/front-end/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Web Component</title>
      <link>https://blog.xuhui.dev/posts/web-component/</link>
      <pubDate>Fri, 14 Oct 2022 20:49:00 +0800</pubDate>
      
      <guid>https://blog.xuhui.dev/posts/web-component/</guid>
      <description>琢磨了下Web Component, 感觉就是还不太好用
跟现有的视图库相比，自定义元素并不方便，一些构建web components的库对其进行了封装，然而封装后的api又对不齐了，到头来还是距离原生开发有距离
这一点也不知道是该说好还是不好，web component这边对于事件并没有额外的关心，你就按照Web API去做就是了，假如说需要封装一个自己的input，那么在输入的时候就自行dispatchEvent(new InputEvent(&#39;input&#39;, {...}))也就行了，然而问题是，习惯了vue、react的我们怎么可能还这么写，甚至可能都不知道还有这API。。vue的事件似乎更好用一些，react直接传回调更是神之设计。不过问题倒也不大，熟悉下原来不常用的API, 就跟写原生js一样。
这个应该最容易发现，我们在用现有的视图库时，props管他啥类型，直接塞到模板/JSX上，但在html里，嗯，老实用字符串吧，复杂数据还得用js去设置。
样式的问题，现在的编辑器，直接在ts/js文件里用字符串写css没提示啊，单独起一个文件吧，还得过一道编译，麻烦。
编辑器对自定义元素的支持拉胯，虽然几年前vscode就已经支持了custom data，但在我不长的体验时间里失灵有点频繁。</description>
    </item>
    
    <item>
      <title>关于深拷贝</title>
      <link>https://blog.xuhui.dev/posts/about-deepcopy/</link>
      <pubDate>Wed, 05 Oct 2022 00:39:52 +0800</pubDate>
      
      <guid>https://blog.xuhui.dev/posts/about-deepcopy/</guid>
      <description>原来遇到要深拷贝这种操作我一般就JSON.stingify然后JSON.parse了(为啥不用lodash呢, 我也没个很好的理由, 可能是看见项目package.json里没这个包也不好自己加得?)
后来lodash就真香了, 但某次看着引入的函数, 我就在想这种递归的方式比用JSON好在哪里, 函数没了? 我只是用来拷贝数据, 不存在这个问题啊; 循环依赖, 什么大聪明非得干出循环依赖的数据来? 至于别的, 等等, JSON和JS对象差别在哪? JS对象的类型定义应该是Record&amp;lt;string | number | Symbol, any&amp;gt;, 嗯Symbol类型肯定是炸了, 不过谁数据里要这玩意儿啊, 再想想别的. 嗯, JSON就对象, 数组, 字符串, 数字, 布尔和null几种类型, 但JS常用的还有undefined, Date也用来表示数据, undefined我知道, 序列化后就没得咯, 很棒的特性, 表单置空用这个就不会发额外字段到后端了, Date呢, 试了下, 会变成ISO格式的字符串, 原来如此. 另外一搜索, 发现还有NaN, Infinity, -Infinity也会被序列化成null.
另外前阵子出了个structuredClone的API, 用这个的话更好, lodash可删(防抖节流? 嗯, 先继续用着吧, 正经人谁手写这玩意儿啊). 一看兼容性, 好家伙Chrome 98, Firefox 94, Node.Js 17, 这谁顶得住, 但这个see also就很妙了, 对啊, 这玩意api虽然有些许不同, 但不还是个深拷贝吗, polyfill下就得了, cloneDeep可删.</description>
    </item>
    
    <item>
      <title>使用路由分割APP</title>
      <link>https://blog.xuhui.dev/posts/use-router-to-split-app/</link>
      <pubDate>Tue, 04 Oct 2022 04:27:23 +0800</pubDate>
      
      <guid>https://blog.xuhui.dev/posts/use-router-to-split-app/</guid>
      <description>我很烦的一件事就是在某些屎山项目里找代码, 即使编辑器的辅助功能已经非常强大多花不了多少时间, 但真遇到了还是本能得厌恶. 典型的有
无数个路由写尼玛一个文件里
一个SFC写上两千行
整个项目都anyscript, 直接把编辑器跳转功能干废
这里只针对 1. 提出一个我觉得比较合理的写法: &amp;ldquo;模块化&amp;rdquo;, 使用路由分割应用逻辑
所谓&amp;quot;模块化&amp;quot;, 其实就是把路由表按组分拆到页面去, 比如我的应用有如下的大几十个页面
系统管理-系统设置 系统管理-在线设置 系统管理-组织设置 项目管理-项目 项目管理-人员 ... 那我们就不应当把他们全平铺在router.ts文件中, 而是针对&amp;quot;系统管理&amp;quot;, &amp;ldquo;项目管理&amp;quot;等模块, 在其目录下新建一个路由表, 这样查看代码的时候也方便知道那个页面是什么玩意儿, 写在哪的. (什么, 你跟我说你相关逻辑散在views, components各个文件夹? mdzz, 这个话题针对就是你们这种人才.) 似乎计算机组成原理课程上, 有个局部性的概念, 这玩意儿也类似的, 可能要常用的代码, 不应该放近点吗?
这样写还有个好处就是控制编译出的代码文件, 通过这种方式, 我们可以很轻易地通过每个模块的路由表来控制chunk, 需要代码分割, 异步加载这个路由表呗, 如果你的应用权限是按模块来的, 那直接鉴权都一起做了, 都不需要的话那就直接插到router.ts就好了, 某个页面实在大到咬人, 那就在路由表里把这个页面也给异步加载了呗. 至于为啥不全部异步, 嗯, 当然可以, 如果你愿意.</description>
    </item>
    
    <item>
      <title>Overridable Component Like MUI in Vue</title>
      <link>https://blog.xuhui.dev/posts/overridable-component-like-mui-in-vue/</link>
      <pubDate>Mon, 03 Oct 2022 23:38:08 +0800</pubDate>
      
      <guid>https://blog.xuhui.dev/posts/overridable-component-like-mui-in-vue/</guid>
      <description>在React的组件库MUI中, 有一个看上去就叼到爆的功能OverridableComponent, 在我初学TS那阵子, 那简直就是神迹, 后来对TS逐渐熟悉了看了下源码也就释然了, 再后来一次还尝试写过一个Vue版本.
本来看懂了原实现, 以为这个移植就是手到擒来, 然而事实上port到Vue还是有点麻烦, 主要问题有
React.ElementType这个类型在Vue中没有等价的东西, 我定义的这个ComponentTsx也没考虑其他情况, 就刚好这里能用而已 从Vue组件里获取$props类型的这个方式有点诡异, 事实上, 这样获取到的也不止props, 还有事件. 有时候我就在想Vue的这个事件的设计是不是真的失败. 感觉就是增加了一个毫无卵用的API 而且这段代码也就能拿来练练手了, 由于Vue函数组件没状态, 容易搞出性能问题, 状态组件的props需要一个个去定义, 真想实现一个能用的OverridableComponent我还真没办法.</description>
    </item>
    
    <item>
      <title>Vue Functional Component</title>
      <link>https://blog.xuhui.dev/archive/vue-functional-component.en/</link>
      <pubDate>Mon, 03 Oct 2022 15:55:26 +0800</pubDate>
      
      <guid>https://blog.xuhui.dev/archive/vue-functional-component.en/</guid>
      <description>In Vue3, functional components have been greatly enhanced, and there are two specific performances
Simplifying the API h available everywhere and slot revision, resulting the wider application Therefore, under Vue3, you can see that the use of functional components has increased a lot. For example, naive-ui. You can find a lot of use of functional components from its documentation. Indeed it&amp;rsquo;s very useful in some cases. But correspondingly, there are some misunderstandings in the use of function components.</description>
    </item>
    
    <item>
      <title>Vue Functional Component</title>
      <link>https://blog.xuhui.dev/posts/vue-functional-component/</link>
      <pubDate>Mon, 03 Oct 2022 15:55:26 +0800</pubDate>
      
      <guid>https://blog.xuhui.dev/posts/vue-functional-component/</guid>
      <description>在Vue3中, 函数组件得到了史诗级加强, 具体表现有二
写法简化, 使用便利性大大增强 随处可用的h, 插槽改版, 适用范围更加宽广 因此在Vue3下, 可以看到的是函数组件的使用大量增加, 典型的如naive-ui, 从其文档中你能找到大量函数组件的使用, 由此可见, Vue3的函数组件确实在某种意义上有着巨大的好处. 但与之相应的, 函数组件的使用也有着一些误区.
函数组件的应用场景 重复的模板片段, 在Vue3中, 配合JSX, 重复片段的组件提取将变得异常简单 插槽的封装, 截止本文编写, Vue插槽始终没有好的编辑器支持(指VS Code, 没用过WebStorm), 但通过将插槽封装成Props的方式, 你将得到具有类型支持的组件. 你可以在naive-ui中看到许多这种写法. 毕竟现在插槽就是一个值为函数组件的对象, 封装起来毫无压力 对状态组件的强化, setup script一个很好的地方在于省去了很多的模板代码, 代码短了自然会好读好写一些, 但不好的地方的就是糟糕的TypeScript支持了, 在包含类型的时候volar插件可能会错误解析你的代码, 而#4294这个issue估计是有生之年系列了. 在某些情况下, 你可以考虑使用函数组件来强化你的状态组件. 函数组件的Props并不需要像defineProps那样从类型声明编译, 你可以直接使用各种复杂类型就像是在一般的TS中那样 使用函数组件的注意事项 虽然你可以对组件的插槽按Props的方式封装, 但如果你不是从头开始写一个组件库, 而是在现有组件的基础上操作, 这样的做法可能并不好, 因为你改变了原有的API 当你使用函数组件对状态组件进行包裹的时候, 你需要注意, 状态组件(子组件)的交互应当避免对函数组件(父组件)Props的操作, 函数组件Props更新将造成整个子树的更新, 这可能会导致你的组件卡成PPT 虽然本文拿naive-ui举例, 但我还是觉得element-plus好用</description>
    </item>
    
  </channel>
</rss>
