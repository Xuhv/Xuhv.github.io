<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>typescript on xuhui</title>
    <link>https://blog.xuhui.dev/series/typescript/</link>
    <description>Recent content in typescript on xuhui</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 03 Oct 2022 23:38:08 +0800</lastBuildDate><atom:link href="https://blog.xuhui.dev/series/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Overridable Component Like MUI in Vue</title>
      <link>https://blog.xuhui.dev/posts/overridable-component-like-mui-in-vue/</link>
      <pubDate>Mon, 03 Oct 2022 23:38:08 +0800</pubDate>
      
      <guid>https://blog.xuhui.dev/posts/overridable-component-like-mui-in-vue/</guid>
      <description>在React的组件库MUI中, 有一个看上去就叼到爆的功能OverridableComponent, 在我初学TS那阵子, 那简直就是神迹, 后来对TS逐渐熟悉了看了下源码也就释然了, 再后来一次还尝试写过一个Vue版本.
本来看懂了原实现, 以为这个移植就是手到擒来, 然而事实上port到Vue还是有点麻烦, 主要问题有
React.ElementType这个类型在Vue中没有等价的东西, 我定义的这个ComponentTsx也没考虑其他情况, 就刚好这里能用而已 从Vue组件里获取$props类型的这个方式有点诡异, 事实上, 这样获取到的也不止props, 还有事件. 有时候我就在想Vue的这个事件的设计是不是真的失败. 感觉就是增加了一个毫无卵用的API 而且这段代码也就能拿来练练手了, 由于Vue函数组件没状态, 容易搞出性能问题, 状态组件的props需要一个个去定义, 真想实现一个能用的OverridableComponent我还真没办法.</description>
    </item>
    
  </channel>
</rss>
